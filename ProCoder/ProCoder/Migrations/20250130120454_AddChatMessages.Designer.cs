// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProCoder.Models;

#nullable disable

namespace ProCoder.Migrations
{
    [DbContext(typeof(SqlExerciseScoringContext))]
    [Migration("20250130120454_AddChatMessages")]
    partial class AddChatMessages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProCoder.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("AnnounceContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnnounceTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementId")
                        .HasName("PK__Announce__9DE44574913CF726");

                    b.HasIndex("ContestId");

                    b.ToTable("Announcement", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("BlogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BlogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<bool>("PinHome")
                        .HasColumnType("bit");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__54379E30F987878E");

                    b.HasIndex("CoderId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMessageId"));

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("CoderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("ProCoder.Models.Coder", b =>
                {
                    b.Property<int>("CoderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoderId"));

                    b.Property<bool>("AdminCoder")
                        .HasColumnType("bit");

                    b.Property<string>("CoderAvatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CoderEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CoderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ContestSetter")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ReceiveEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.HasKey("CoderId")
                        .HasName("PK__Coder__C3ECFFBE3E74B862");

                    b.HasIndex(new[] { "CoderEmail" }, "UQ__Coder__132DE69E507A9F15")
                        .IsUnique();

                    b.ToTable("Coder", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFCA05C8F9DA");

                    b.HasIndex("BlogId");

                    b.HasIndex("CoderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProCoder.Models.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestId"));

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<string>("ContestDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedPenalty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FrozenTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("RankingFinished")
                        .HasColumnType("bit");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusContest")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContestId")
                        .HasName("PK__Contest__87DE0B1AADA4BC82");

                    b.HasIndex("CoderId");

                    b.ToTable("Contest", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.DatabaseSchema", b =>
                {
                    b.Property<int>("DatabaseSchemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseSchemaId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaDefinition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("DatabaseSchemaId")
                        .HasName("PK__Database__DF438D0AF9742449");

                    b.HasIndex(new[] { "SchemaName" }, "UQ__Database__AAFC14FE1BAC5E1E")
                        .IsUnique();

                    b.ToTable("DatabaseSchema", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Favourite", b =>
                {
                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoderId", "ProblemId")
                        .HasName("PK__Favourit__76222A965C0D1F41");

                    b.HasIndex("ProblemId");

                    b.ToTable("Favourite", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.HasProblem", b =>
                {
                    b.Property<int>("HasProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HasProblemId"));

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<int>("PointProblem")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemOrder")
                        .HasColumnType("int");

                    b.HasKey("HasProblemId")
                        .HasName("PK__HasProbl__CDB55A12FCBB9A57");

                    b.HasIndex("ContestId");

                    b.HasIndex("ProblemId");

                    b.ToTable("HasProblem", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Participation", b =>
                {
                    b.Property<int>("ParticipationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipationId"));

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<int>("PointScore")
                        .HasColumnType("int");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("RegisterMac")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegisterTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("SolvedCount")
                        .HasColumnType("int");

                    b.Property<int>("TimeScore")
                        .HasColumnType("int");

                    b.HasKey("ParticipationId")
                        .HasName("PK__Particip__4EA270E0858E2680");

                    b.HasIndex("CoderId");

                    b.HasIndex("ContestId");

                    b.ToTable("Participation", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"));

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("DatabaseSchemaId")
                        .HasColumnType("int");

                    b.Property<string>("ProblemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemExplanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("ProblemId")
                        .HasName("PK__Problem__5CED528A1430AA49");

                    b.HasIndex("CoderId");

                    b.HasIndex("DatabaseSchemaId");

                    b.HasIndex(new[] { "ProblemCode" }, "UQ__Problem__DB85FA6139A94322")
                        .IsUnique();

                    b.ToTable("Problem", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.ProblemTheme", b =>
                {
                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemId", "ThemeId")
                        .HasName("PK__ProblemT__D3566CC7EDE3C2DF");

                    b.HasIndex("ThemeId");

                    b.ToTable("ProblemTheme", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubmitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("TakePartId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionId")
                        .HasName("PK__Submissi__449EE125A94E5CCE");

                    b.HasIndex("CoderId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("TakePartId");

                    b.ToTable("Submission", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.TakePart", b =>
                {
                    b.Property<int>("TakePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TakePartId"));

                    b.Property<int>("MaxPoint")
                        .HasColumnType("int");

                    b.Property<int>("ParticipationId")
                        .HasColumnType("int");

                    b.Property<int>("PointWon")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionCount")
                        .HasColumnType("int");

                    b.Property<string>("SubmitMac")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("TimeSolved")
                        .HasColumnType("datetime2");

                    b.HasKey("TakePartId")
                        .HasName("PK__TakePart__1A8DC8FCECF4A125");

                    b.HasIndex("ParticipationId");

                    b.HasIndex("ProblemId");

                    b.ToTable("TakePart", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.TestCase", b =>
                {
                    b.Property<int>("TestCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestCaseId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("TestQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("TestCaseId")
                        .HasName("PK__TestCase__D2074A94C148A30A");

                    b.HasIndex("ProblemId");

                    b.ToTable("TestCase", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.TestRun", b =>
                {
                    b.Property<int>("TestRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestRunId"));

                    b.Property<string>("ActualOutput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.HasKey("TestRunId")
                        .HasName("PK__TestRun__BF2F960E0BC6190E");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestRun", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ThemeOrder")
                        .HasColumnType("int");

                    b.HasKey("ThemeId")
                        .HasName("PK__Theme__FBB3E4D9DE965D53");

                    b.HasIndex(new[] { "ThemeName" }, "UQ__Theme__4E60E6D044DEEBA2")
                        .IsUnique();

                    b.ToTable("Theme", (string)null);
                });

            modelBuilder.Entity("Solved", b =>
                {
                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.HasKey("CoderId", "ProblemId")
                        .HasName("PK__Solved__76222A96580CAFF0");

                    b.HasIndex("ProblemId");

                    b.ToTable("Solved", (string)null);
                });

            modelBuilder.Entity("ProCoder.Models.Announcement", b =>
                {
                    b.HasOne("ProCoder.Models.Contest", "Contest")
                        .WithMany("Announcements")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Announcement_Contest");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("ProCoder.Models.Blog", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany("Blogs")
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_Coder");

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("ProCoder.Models.ChatMessage", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany()
                        .HasForeignKey("CoderId")
                        .IsRequired();

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("ProCoder.Models.Comment", b =>
                {
                    b.HasOne("ProCoder.Models.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Blog");

                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany("Comments")
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Coder");

                    b.Navigation("Blog");

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("ProCoder.Models.Contest", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany("Contests")
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Contest_Coder");

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("ProCoder.Models.Favourite", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany("Favourites")
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_Coder");

                    b.HasOne("ProCoder.Models.Problem", "Problem")
                        .WithMany("Favourites")
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_Problem");

                    b.Navigation("Coder");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ProCoder.Models.HasProblem", b =>
                {
                    b.HasOne("ProCoder.Models.Contest", "Contest")
                        .WithMany("HasProblems")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HasProblem_Contest");

                    b.HasOne("ProCoder.Models.Problem", "Problem")
                        .WithMany("HasProblems")
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("FK_HasProblem_Problem");

                    b.Navigation("Contest");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ProCoder.Models.Participation", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany("Participations")
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Participation_Coder");

                    b.HasOne("ProCoder.Models.Contest", "Contest")
                        .WithMany("Participations")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Participation_Contest");

                    b.Navigation("Coder");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("ProCoder.Models.Problem", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany("Problems")
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Problem_Coder");

                    b.HasOne("ProCoder.Models.DatabaseSchema", "DatabaseSchema")
                        .WithMany("Problems")
                        .HasForeignKey("DatabaseSchemaId")
                        .IsRequired()
                        .HasConstraintName("FK_Problem_DatabaseSchema");

                    b.Navigation("Coder");

                    b.Navigation("DatabaseSchema");
                });

            modelBuilder.Entity("ProCoder.Models.ProblemTheme", b =>
                {
                    b.HasOne("ProCoder.Models.Problem", "Problem")
                        .WithMany("ProblemThemes")
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("FK_ProblemTheme_Problem");

                    b.HasOne("ProCoder.Models.Theme", "Theme")
                        .WithMany("ProblemThemes")
                        .HasForeignKey("ThemeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProblemTheme_Theme");

                    b.Navigation("Problem");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ProCoder.Models.Submission", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", "Coder")
                        .WithMany("Submissions")
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Submission_Coder");

                    b.HasOne("ProCoder.Models.Problem", "Problem")
                        .WithMany("Submissions")
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("FK_Submission_Problem");

                    b.HasOne("ProCoder.Models.TakePart", "TakePart")
                        .WithMany("Submissions")
                        .HasForeignKey("TakePartId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Submission_TakePart");

                    b.Navigation("Coder");

                    b.Navigation("Problem");

                    b.Navigation("TakePart");
                });

            modelBuilder.Entity("ProCoder.Models.TakePart", b =>
                {
                    b.HasOne("ProCoder.Models.Participation", "Participation")
                        .WithMany("TakeParts")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TakePart_Participation");

                    b.HasOne("ProCoder.Models.Problem", "Problem")
                        .WithMany("TakeParts")
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("FK_TakePart_Problem");

                    b.Navigation("Participation");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ProCoder.Models.TestCase", b =>
                {
                    b.HasOne("ProCoder.Models.Problem", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TestCase_Problem");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ProCoder.Models.TestRun", b =>
                {
                    b.HasOne("ProCoder.Models.Submission", "Submission")
                        .WithMany("TestRuns")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TestRun_Submission");

                    b.HasOne("ProCoder.Models.TestCase", "TestCase")
                        .WithMany("TestRuns")
                        .HasForeignKey("TestCaseId")
                        .IsRequired()
                        .HasConstraintName("FK_TestRun_TestCase");

                    b.Navigation("Submission");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("Solved", b =>
                {
                    b.HasOne("ProCoder.Models.Coder", null)
                        .WithMany()
                        .HasForeignKey("CoderId")
                        .IsRequired()
                        .HasConstraintName("FK_Solved_Coder");

                    b.HasOne("ProCoder.Models.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .IsRequired()
                        .HasConstraintName("FK_Solved_Problem");
                });

            modelBuilder.Entity("ProCoder.Models.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ProCoder.Models.Coder", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Contests");

                    b.Navigation("Favourites");

                    b.Navigation("Participations");

                    b.Navigation("Problems");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ProCoder.Models.Contest", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("HasProblems");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("ProCoder.Models.DatabaseSchema", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("ProCoder.Models.Participation", b =>
                {
                    b.Navigation("TakeParts");
                });

            modelBuilder.Entity("ProCoder.Models.Problem", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("HasProblems");

                    b.Navigation("ProblemThemes");

                    b.Navigation("Submissions");

                    b.Navigation("TakeParts");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("ProCoder.Models.Submission", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("ProCoder.Models.TakePart", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ProCoder.Models.TestCase", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("ProCoder.Models.Theme", b =>
                {
                    b.Navigation("ProblemThemes");
                });
#pragma warning restore 612, 618
        }
    }
}
