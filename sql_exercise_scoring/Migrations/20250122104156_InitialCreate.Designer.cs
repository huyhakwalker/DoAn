// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sql_exercise_scoring.Data;

#nullable disable

namespace sql_exercise_scoring.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250122104156_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sql_exercise_scoring.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("AnnounceContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnnounceTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ContestId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("ContestId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("BlogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BlogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<bool>("PinHome")
                        .HasColumnType("bit");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("BlogId");

                    b.HasIndex("CoderId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Coder", b =>
                {
                    b.Property<int>("CoderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoderId"));

                    b.Property<bool>("AdminCoder")
                        .HasColumnType("bit");

                    b.Property<string>("CoderAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContestSetter")
                        .HasColumnType("bit");

                    b.Property<string>("DescriptionCoder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastCompilerId")
                        .HasColumnType("int");

                    b.Property<string>("PwdMd5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PwdResetCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PwdResetDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SaltMd5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoderId");

                    b.ToTable("Coders");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("BlogId");

                    b.HasIndex("CoderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestId"));

                    b.Property<int?>("CoderId")
                        .HasColumnType("int");

                    b.Property<string>("ContestDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedPenalty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FrozenTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("RankingFinished")
                        .HasColumnType("bit");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusContest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContestId");

                    b.HasIndex("CoderId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.DatabaseSchema", b =>
                {
                    b.Property<int>("DatabaseSchemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseSchemaId"));

                    b.Property<string>("InitialData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("SchemaDefinition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DatabaseSchemaId");

                    b.HasIndex("ProblemId");

                    b.ToTable("DatabaseSchemas");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Favourite", b =>
                {
                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoderId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.HasProblem", b =>
                {
                    b.Property<int>("HasProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HasProblemId"));

                    b.Property<int?>("ContestId")
                        .HasColumnType("int");

                    b.Property<int>("PointProblem")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemOrder")
                        .HasColumnType("int");

                    b.HasKey("HasProblemId");

                    b.HasIndex("ContestId");

                    b.HasIndex("ProblemId");

                    b.ToTable("HasProblems");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Participation", b =>
                {
                    b.Property<int>("ParticipationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipationId"));

                    b.Property<int?>("CoderId")
                        .HasColumnType("int");

                    b.Property<int?>("ContestId")
                        .HasColumnType("int");

                    b.Property<int>("PointScore")
                        .HasColumnType("int");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("RegisterMac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SolvedCount")
                        .HasColumnType("int");

                    b.Property<int>("SubRank")
                        .HasColumnType("int");

                    b.Property<int>("TimeScore")
                        .HasColumnType("int");

                    b.HasKey("ParticipationId");

                    b.HasIndex("CoderId");

                    b.HasIndex("ContestId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"));

                    b.Property<int?>("CoderId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineId")
                        .HasColumnType("int");

                    b.Property<string>("ProblemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemExplanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("ReviewCoderId")
                        .HasColumnType("int");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestProgCompilations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemId");

                    b.HasIndex("CoderId");

                    b.HasIndex("EngineId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.ProblemTheme", b =>
                {
                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProblemId", "ThemeId");

                    b.HasIndex("ThemeId");

                    b.ToTable("ProblemThemes");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Solved", b =>
                {
                    b.Property<int>("CoderId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.HasKey("CoderId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("Solveds");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.SqlEngine", b =>
                {
                    b.Property<int>("EngineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("engine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngineId"));

                    b.Property<string>("EngineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("engine_name");

                    b.Property<string>("EngineOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("engine_option");

                    b.Property<string>("EnginePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("engine_path");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("version");

                    b.HasKey("EngineId");

                    b.ToTable("sql_engine", (string)null);
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int?>("CoderId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemorySize")
                        .HasColumnType("int");

                    b.Property<int>("MaxTimeDuration")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmitLineCount")
                        .HasColumnType("int");

                    b.Property<int>("SubmitMinute")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TakePartId")
                        .HasColumnType("int");

                    b.Property<string>("TestResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestRunCount")
                        .HasColumnType("int");

                    b.HasKey("SubmissionId");

                    b.HasIndex("CoderId");

                    b.HasIndex("EngineId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("TakePartId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TakePart", b =>
                {
                    b.Property<int>("TakePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TakePartId"));

                    b.Property<DateTime?>("FrozenTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxPoint")
                        .HasColumnType("int");

                    b.Property<int?>("ParticipationId")
                        .HasColumnType("int");

                    b.Property<int>("PointWon")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionCount")
                        .HasColumnType("int");

                    b.Property<string>("SubmitMac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeSolved")
                        .HasColumnType("datetime2");

                    b.HasKey("TakePartId");

                    b.HasIndex("ParticipationId");

                    b.HasIndex("ProblemId");

                    b.ToTable("TakeParts");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TestCase", b =>
                {
                    b.Property<int>("TestCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestCaseId"));

                    b.Property<string>("CheckerLogic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreTest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("SampleTest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestCaseId");

                    b.HasIndex("ProblemId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TestRun", b =>
                {
                    b.Property<int>("TestRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestRunId"));

                    b.Property<string>("CheckerLog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemorySize")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<int?>("TestCaseId")
                        .HasColumnType("int");

                    b.Property<string>("TestOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeDuration")
                        .HasColumnType("int");

                    b.HasKey("TestRunId");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThemeOrder")
                        .HasColumnType("int");

                    b.HasKey("ThemeId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Announcement", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Contest", "Contest")
                        .WithMany("Announcements")
                        .HasForeignKey("ContestId");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Blog", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Blogs")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Comment", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Comments")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Contest", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Contests")
                        .HasForeignKey("CoderId");

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.DatabaseSchema", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("DatabaseSchemas")
                        .HasForeignKey("ProblemId");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Favourite", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Favourites")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("Favourites")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.HasProblem", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Contest", "Contest")
                        .WithMany("HasProblems")
                        .HasForeignKey("ContestId");

                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("HasProblems")
                        .HasForeignKey("ProblemId");

                    b.Navigation("Contest");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Participation", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Participations")
                        .HasForeignKey("CoderId");

                    b.HasOne("sql_exercise_scoring.Models.Contest", "Contest")
                        .WithMany("Participations")
                        .HasForeignKey("ContestId");

                    b.Navigation("Coder");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Problem", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Problems")
                        .HasForeignKey("CoderId");

                    b.HasOne("sql_exercise_scoring.Models.SqlEngine", "Engine")
                        .WithMany("Problems")
                        .HasForeignKey("EngineId");

                    b.Navigation("Coder");

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.ProblemTheme", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("ProblemThemes")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_exercise_scoring.Models.Theme", "Theme")
                        .WithMany("ProblemThemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Solved", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Solveds")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("Solveds")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Submission", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Coder", "Coder")
                        .WithMany("Submissions")
                        .HasForeignKey("CoderId");

                    b.HasOne("sql_exercise_scoring.Models.SqlEngine", "Engine")
                        .WithMany("Submissions")
                        .HasForeignKey("EngineId");

                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("Submissions")
                        .HasForeignKey("ProblemId");

                    b.HasOne("sql_exercise_scoring.Models.TakePart", "TakePart")
                        .WithMany("Submissions")
                        .HasForeignKey("TakePartId");

                    b.Navigation("Coder");

                    b.Navigation("Engine");

                    b.Navigation("Problem");

                    b.Navigation("TakePart");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TakePart", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Participation", "Participation")
                        .WithMany("TakeParts")
                        .HasForeignKey("ParticipationId");

                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("TakeParts")
                        .HasForeignKey("ProblemId");

                    b.Navigation("Participation");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TestCase", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Problem", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemId");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TestRun", b =>
                {
                    b.HasOne("sql_exercise_scoring.Models.Submission", "Submission")
                        .WithMany("TestRuns")
                        .HasForeignKey("SubmissionId");

                    b.HasOne("sql_exercise_scoring.Models.TestCase", "TestCase")
                        .WithMany("TestRuns")
                        .HasForeignKey("TestCaseId");

                    b.Navigation("Submission");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Coder", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Contests");

                    b.Navigation("Favourites");

                    b.Navigation("Participations");

                    b.Navigation("Problems");

                    b.Navigation("Solveds");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Contest", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("HasProblems");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Participation", b =>
                {
                    b.Navigation("TakeParts");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Problem", b =>
                {
                    b.Navigation("DatabaseSchemas");

                    b.Navigation("Favourites");

                    b.Navigation("HasProblems");

                    b.Navigation("ProblemThemes");

                    b.Navigation("Solveds");

                    b.Navigation("Submissions");

                    b.Navigation("TakeParts");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.SqlEngine", b =>
                {
                    b.Navigation("Problems");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Submission", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TakePart", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.TestCase", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("sql_exercise_scoring.Models.Theme", b =>
                {
                    b.Navigation("ProblemThemes");
                });
#pragma warning restore 612, 618
        }
    }
}
